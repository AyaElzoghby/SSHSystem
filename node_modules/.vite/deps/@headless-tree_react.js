import {
  require_react
} from "./chunk-O3W2YV4L.js";
import {
  AssistiveDndState,
  createTree
} from "./chunk-MTDLZPZD.js";
import {
  __toESM
} from "./chunk-OCBYBPSH.js";

// node_modules/@headless-tree/react/lib/esm/assistive-tree-description.js
var import_react = __toESM(require_react());
var __rest = function(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var styles = {
  position: "absolute",
  margin: "-1px",
  width: "1px",
  height: "1px",
  overflow: "hidden",
  clip: "rect(0 0 0 0)"
};
var getDefaultLabel = (dnd, assistiveState, hotkeys) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j;
  if (!hotkeys.startDrag)
    return "";
  const itemNames = (_b = (_a = dnd === null || dnd === void 0 ? void 0 : dnd.draggedItems) === null || _a === void 0 ? void 0 : _a.map((item) => item.getItemName()).join(", ")) !== null && _b !== void 0 ? _b : "";
  const position = !(dnd === null || dnd === void 0 ? void 0 : dnd.dragTarget) ? "None" : "childIndex" in dnd.dragTarget ? `${dnd.dragTarget.childIndex} of ${dnd.dragTarget.item.getChildren().length} in ${dnd.dragTarget.item.getItemName()}` : `in ${dnd.dragTarget.item.getItemName()}`;
  const navGuide = `Press ${(_c = hotkeys.dragUp) === null || _c === void 0 ? void 0 : _c.hotkey} and ${(_d = hotkeys.dragDown) === null || _d === void 0 ? void 0 : _d.hotkey} to move up or down, ${(_e = hotkeys.completeDrag) === null || _e === void 0 ? void 0 : _e.hotkey} to drop, ${(_f = hotkeys.cancelDrag) === null || _f === void 0 ? void 0 : _f.hotkey} to abort.`;
  switch (assistiveState) {
    case AssistiveDndState.Started:
      return itemNames ? `Dragging ${itemNames}. Current position: ${position}. ${navGuide}` : `Current position: ${position}. ${navGuide}`;
    case AssistiveDndState.Dragging:
      return itemNames ? `${itemNames}, ${position}` : position;
    case AssistiveDndState.Completed:
      return `Drag completed. Press ${(_g = hotkeys.startDrag) === null || _g === void 0 ? void 0 : _g.hotkey} to move selected items`;
    case AssistiveDndState.Aborted:
      return `Drag cancelled. Press ${(_h = hotkeys.startDrag) === null || _h === void 0 ? void 0 : _h.hotkey} to move selected items`;
    case AssistiveDndState.None:
    default:
      return `Press ${(_j = hotkeys.startDrag) === null || _j === void 0 ? void 0 : _j.hotkey} to move selected items`;
  }
};
var AssistiveTreeDescription = (_a) => {
  var _b;
  var { tree, getLabel = getDefaultLabel } = _a, props = __rest(_a, ["tree", "getLabel"]);
  const state = tree.getState();
  return import_react.default.createElement("span", Object.assign({ "aria-live": "assertive" }, props, { style: Object.assign(Object.assign({}, styles), props.style) }), getLabel(state.dnd, (_b = state.assistiveDndState) !== null && _b !== void 0 ? _b : AssistiveDndState.None, tree.getHotkeyPresets()));
};

// node_modules/@headless-tree/react/lib/esm/use-tree.js
var import_react2 = __toESM(require_react());
var useTree = (config) => {
  const [tree] = (0, import_react2.useState)(() => ({ current: createTree(config) }));
  const [state, setState] = (0, import_react2.useState)(() => tree.current.getState());
  (0, import_react2.useEffect)(() => {
    tree.current.rebuildTree();
  }, [tree]);
  (0, import_react2.useInsertionEffect)(() => {
    tree.current.setConfig((prev) => Object.assign(Object.assign(Object.assign({}, prev), config), { state: Object.assign(Object.assign({}, state), config.state), setState: (state2) => {
      var _a;
      setState(state2);
      (_a = config.setState) === null || _a === void 0 ? void 0 : _a.call(config, state2);
    } }));
  });
  return tree.current;
};
export {
  AssistiveTreeDescription,
  useTree
};
//# sourceMappingURL=@headless-tree_react.js.map
