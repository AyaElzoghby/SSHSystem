import { useEffect, useInsertionEffect, useState } from "react";
import { createTree } from "@headless-tree/core";
export const useTree = (config) => {
    const [tree] = useState(() => ({ current: createTree(config) }));
    const [state, setState] = useState(() => tree.current.getState());
    useEffect(() => {
        tree.current.rebuildTree();
    }, [tree]); // runs only once after mount
    useInsertionEffect(() => {
        tree.current.setConfig((prev) => (Object.assign(Object.assign(Object.assign({}, prev), config), { state: Object.assign(Object.assign({}, state), config.state), setState: (state) => {
                var _a;
                setState(state);
                (_a = config.setState) === null || _a === void 0 ? void 0 : _a.call(config, state);
            } })));
    });
    return tree.current;
};
