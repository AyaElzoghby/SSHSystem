import { DragEvent } from "react";
import { TestTree } from "./test-tree";
import { HotkeyName } from "../types/core";
export declare class TestTreeDo<T> {
    protected tree: TestTree<T>;
    protected itemInstance(itemId: string): import("../types/core").ItemInstance<T>;
    protected itemProps(itemId: string): Record<string, any>;
    constructor(tree: TestTree<T>);
    selectItem(id: string): void;
    shiftSelectItem(id: string): void;
    ctrlSelectItem(id: string): void;
    ctrlShiftSelectItem(id: string): void;
    selectMultiple(...ids: string[]): void;
    hotkey(hotkey: HotkeyName, e?: Partial<KeyboardEvent>): void;
    startDrag(itemId: string, event?: DragEvent): DragEvent<Element>;
    dragOver(itemId: string, event?: DragEvent): DragEvent<Element>;
    dragOverNotAllowed(itemId: string, event?: DragEvent): DragEvent<Element>;
    dragLeave(itemId: string): void;
    dragEnd(itemId: string, event?: DragEvent): DragEvent<Element>;
    drop(itemId: string, event?: DragEvent): Promise<DragEvent<Element>>;
    dragOverAndDrop(itemId: string, event?: DragEvent): Promise<DragEvent<Element>>;
    private consistentCalls;
}
