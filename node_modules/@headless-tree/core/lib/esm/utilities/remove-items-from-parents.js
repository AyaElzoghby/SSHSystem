var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export const removeItemsFromParents = (movedItems, onChangeChildren) => __awaiter(void 0, void 0, void 0, function* () {
    const movedItemsIds = movedItems.map((item) => item.getId());
    const uniqueParents = [
        ...new Set(movedItems.map((item) => item.getParent())),
    ];
    for (const parent of uniqueParents) {
        const siblings = parent === null || parent === void 0 ? void 0 : parent.getChildren();
        if (siblings && parent) {
            const newChildren = siblings
                .filter((sibling) => !movedItemsIds.includes(sibling.getId()))
                .map((i) => i.getId());
            yield onChangeChildren(parent, newChildren);
            if (parent && "updateCachedChildrenIds" in parent) {
                parent === null || parent === void 0 ? void 0 : parent.updateCachedChildrenIds(newChildren);
            }
        }
    }
    movedItems[0].getTree().rebuildTree();
});
