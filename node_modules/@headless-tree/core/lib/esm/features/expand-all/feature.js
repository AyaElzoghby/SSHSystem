var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export const expandAllFeature = {
    key: "expand-all",
    treeInstance: {
        expandAll: (_a, cancelToken_1) => __awaiter(void 0, [_a, cancelToken_1], void 0, function* ({ tree }, cancelToken) {
            yield Promise.all(tree.getItems().map((item) => item.expandAll(cancelToken)));
        }),
        collapseAll: ({ tree }) => {
            tree.applySubStateUpdate("expandedItems", []);
            tree.rebuildTree();
        },
    },
    itemInstance: {
        expandAll: (_a, cancelToken_1) => __awaiter(void 0, [_a, cancelToken_1], void 0, function* ({ tree, item }, cancelToken) {
            if (cancelToken === null || cancelToken === void 0 ? void 0 : cancelToken.current) {
                return;
            }
            if (!item.isFolder()) {
                return;
            }
            item.expand();
            yield tree.waitForItemChildrenLoaded(item.getId());
            yield Promise.all(item.getChildren().map((child) => __awaiter(void 0, void 0, void 0, function* () {
                yield tree.waitForItemChildrenLoaded(item.getId());
                yield (child === null || child === void 0 ? void 0 : child.expandAll(cancelToken));
            })));
        }),
        collapseAll: ({ item }) => {
            if (!item.isExpanded())
                return;
            for (const child of item.getChildren()) {
                child === null || child === void 0 ? void 0 : child.collapseAll();
            }
            item.collapse();
        },
    },
    hotkeys: {
        expandSelected: {
            hotkey: "Control+Shift+Plus",
            handler: (_, tree) => __awaiter(void 0, void 0, void 0, function* () {
                const cancelToken = { current: false };
                const cancelHandler = (e) => {
                    if (e.code === "Escape") {
                        cancelToken.current = true;
                    }
                };
                document.addEventListener("keydown", cancelHandler);
                yield Promise.all(tree.getSelectedItems().map((item) => item.expandAll(cancelToken)));
                document.removeEventListener("keydown", cancelHandler);
            }),
        },
        collapseSelected: {
            hotkey: "Control+Shift+Minus",
            handler: (_, tree) => {
                tree.getSelectedItems().forEach((item) => item.collapseAll());
            },
        },
    },
};
