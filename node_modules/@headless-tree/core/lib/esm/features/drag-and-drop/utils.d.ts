import { ItemInstance, TreeInstance } from "../../types/core";
import { DragTarget } from "./types";
export declare enum ItemDropCategory {
    Item = 0,
    ExpandedFolder = 1,
    LastInGroup = 2
}
export declare const isOrderedDragTarget: <T>(dragTarget: DragTarget<T>) => dragTarget is {
    item: ItemInstance<T>;
    childIndex: number;
    insertionIndex: number;
    dragLineIndex: number;
    dragLineLevel: number;
};
export declare const canDrop: (dataTransfer: DataTransfer | null, target: DragTarget<any>, tree: TreeInstance<any>) => boolean;
export declare const getItemDropCategory: (item: ItemInstance<any>) => ItemDropCategory;
export declare const getInsertionIndex: <T>(children: ItemInstance<T>[], childIndex: number, draggedItems: ItemInstance<T>[] | undefined) => number;
export declare const getDragCode: (e: any, item: ItemInstance<any>, tree: TreeInstance<any>) => string;
/** @param item refers to the bottom-most item of the container, at which bottom is being reparented on (e.g. root-1-2-6)  */
export declare const getReparentTarget: <T>(item: ItemInstance<T>, reparentLevel: number, draggedItems: ItemInstance<T>[] | undefined) => {
    item: ItemInstance<any>;
    childIndex: number;
    insertionIndex: number;
    dragLineIndex: number;
    dragLineLevel: number;
};
export declare const getDragTarget: (e: any, item: ItemInstance<any>, tree: TreeInstance<any>, canReorder?: boolean | undefined) => DragTarget<any>;
