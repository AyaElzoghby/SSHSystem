const specialKeys = {
    // TODO:breaking deprecate auto-lowercase
    letter: /^Key[A-Z]$/,
    letterornumber: /^(Key[A-Z]|Digit[0-9])$/,
    plus: /^(NumpadAdd|Plus)$/,
    minus: /^(NumpadSubtract|Minus)$/,
    control: /^(ControlLeft|ControlRight)$/,
    shift: /^(ShiftLeft|ShiftRight)$/,
};
const testHotkeyMatch = (pressedKeys, tree, hotkey) => {
    const supposedKeys = hotkey.hotkey.toLowerCase().split("+"); // TODO:breaking deprecate auto-lowercase
    const doKeysMatch = supposedKeys.every((key) => {
        if (key in specialKeys) {
            return [...pressedKeys].some((pressedKey) => specialKeys[key].test(pressedKey));
        }
        const pressedKeysLowerCase = [...pressedKeys] // TODO:breaking deprecate auto-lowercase
            .map((k) => k.toLowerCase());
        if (pressedKeysLowerCase.includes(key.toLowerCase())) {
            return true;
        }
        if (pressedKeysLowerCase.includes(`key${key.toLowerCase()}`)) {
            // TODO:breaking deprecate e.key character matching
            return true;
        }
        return false;
    });
    const isEnabled = !hotkey.isEnabled || hotkey.isEnabled(tree);
    const equalCounts = pressedKeys.size === supposedKeys.length;
    return doKeysMatch && isEnabled && equalCounts;
};
const findHotkeyMatch = (pressedKeys, tree, config1, config2) => {
    var _a;
    return (_a = Object.entries(Object.assign(Object.assign({}, config1), config2)).find(([, hotkey]) => testHotkeyMatch(pressedKeys, tree, hotkey))) === null || _a === void 0 ? void 0 : _a[0];
};
export const hotkeysCoreFeature = {
    key: "hotkeys-core",
    onTreeMount: (tree, element) => {
        const data = tree.getDataRef();
        const keydown = (e) => {
            var _a;
            var _b;
            const { ignoreHotkeysOnInputs, onTreeHotkey, hotkeys } = tree.getConfig();
            if (e.target instanceof HTMLInputElement && ignoreHotkeysOnInputs) {
                return;
            }
            (_a = (_b = data.current).pressedKeys) !== null && _a !== void 0 ? _a : (_b.pressedKeys = new Set());
            const newMatch = !data.current.pressedKeys.has(e.code);
            data.current.pressedKeys.add(e.code);
            const hotkeyName = findHotkeyMatch(data.current.pressedKeys, tree, tree.getHotkeyPresets(), hotkeys);
            if (e.target instanceof HTMLInputElement) {
                // JS respects composite keydowns while input elements are focused, and
                // doesnt send the associated keyup events with the same key name
                data.current.pressedKeys.delete(e.code);
            }
            if (!hotkeyName)
                return;
            const hotkeyConfig = Object.assign(Object.assign({}, tree.getHotkeyPresets()[hotkeyName]), hotkeys === null || hotkeys === void 0 ? void 0 : hotkeys[hotkeyName]);
            if (!hotkeyConfig)
                return;
            if (!hotkeyConfig.allowWhenInputFocused &&
                e.target instanceof HTMLInputElement)
                return;
            if (!hotkeyConfig.canRepeat && !newMatch)
                return;
            if (hotkeyConfig.preventDefault)
                e.preventDefault();
            hotkeyConfig.handler(e, tree);
            onTreeHotkey === null || onTreeHotkey === void 0 ? void 0 : onTreeHotkey(hotkeyName, e);
        };
        const keyup = (e) => {
            var _a;
            var _b;
            (_a = (_b = data.current).pressedKeys) !== null && _a !== void 0 ? _a : (_b.pressedKeys = new Set());
            data.current.pressedKeys.delete(e.code);
        };
        const reset = () => {
            data.current.pressedKeys = new Set();
        };
        // keyup is registered on document, because some hotkeys shift
        // the focus away from the tree (i.e. search)
        // and then we wouldn't get the keyup event anymore
        element.addEventListener("keydown", keydown);
        document.addEventListener("keyup", keyup);
        window.addEventListener("focus", reset);
        data.current.keydownHandler = keydown;
        data.current.keyupHandler = keyup;
        data.current.resetHandler = reset;
    },
    onTreeUnmount: (tree, element) => {
        const data = tree.getDataRef();
        if (data.current.keyupHandler) {
            document.removeEventListener("keyup", data.current.keyupHandler);
            delete data.current.keyupHandler;
        }
        if (data.current.keydownHandler) {
            element.removeEventListener("keydown", data.current.keydownHandler);
            delete data.current.keydownHandler;
        }
        if (data.current.resetHandler) {
            window.removeEventListener("focus", data.current.resetHandler);
            delete data.current.resetHandler;
        }
    },
};
