import { makeStateUpdater } from "../../utils";
export const renamingFeature = {
    key: "renaming",
    overwrites: ["drag-and-drop"],
    getDefaultConfig: (defaultConfig, tree) => (Object.assign({ setRenamingItem: makeStateUpdater("renamingItem", tree), setRenamingValue: makeStateUpdater("renamingValue", tree), canRename: () => true }, defaultConfig)),
    stateHandlerNames: {
        renamingItem: "setRenamingItem",
        renamingValue: "setRenamingValue",
    },
    treeInstance: {
        getRenamingItem: ({ tree }) => {
            const itemId = tree.getState().renamingItem;
            return itemId ? tree.getItemInstance(itemId) : null;
        },
        getRenamingValue: ({ tree }) => tree.getState().renamingValue || "",
        abortRenaming: ({ tree }) => {
            tree.applySubStateUpdate("renamingItem", null);
            tree.updateDomFocus();
        },
        completeRenaming: ({ tree }) => {
            var _a;
            const config = tree.getConfig();
            const item = tree.getRenamingItem();
            if (item) {
                (_a = config.onRename) === null || _a === void 0 ? void 0 : _a.call(config, item, tree.getState().renamingValue || "");
            }
            tree.applySubStateUpdate("renamingItem", null);
            tree.updateDomFocus();
        },
        isRenamingItem: ({ tree }) => !!tree.getState().renamingItem,
    },
    itemInstance: {
        startRenaming: ({ tree, item, itemId }) => {
            if (!item.canRename()) {
                return;
            }
            tree.applySubStateUpdate("renamingItem", itemId);
            tree.applySubStateUpdate("renamingValue", item.getItemName());
        },
        getRenameInputProps: ({ tree }) => ({
            ref: (r) => r === null || r === void 0 ? void 0 : r.focus(),
            onBlur: () => tree.abortRenaming(),
            value: tree.getRenamingValue(),
            onChange: (e) => {
                var _a;
                tree.applySubStateUpdate("renamingValue", (_a = e.target) === null || _a === void 0 ? void 0 : _a.value);
            },
        }),
        canRename: ({ tree, item }) => { var _a, _b, _c; return (_c = (_b = (_a = tree.getConfig()).canRename) === null || _b === void 0 ? void 0 : _b.call(_a, item)) !== null && _c !== void 0 ? _c : true; },
        isRenaming: ({ tree, item }) => item.getId() === tree.getState().renamingItem,
        getProps: ({ prev, item }) => {
            var _a;
            const isRenaming = item.isRenaming();
            const prevProps = (_a = prev === null || prev === void 0 ? void 0 : prev()) !== null && _a !== void 0 ? _a : {};
            return isRenaming
                ? Object.assign(Object.assign({}, prevProps), { draggable: false, onDragStart: () => { } }) : prevProps;
        },
    },
    hotkeys: {
        renameItem: {
            hotkey: "F2",
            handler: (e, tree) => {
                tree.getFocusedItem().startRenaming();
            },
        },
        abortRenaming: {
            hotkey: "Escape",
            allowWhenInputFocused: true,
            isEnabled: (tree) => tree.isRenamingItem(),
            handler: (e, tree) => {
                tree.abortRenaming();
            },
        },
        completeRenaming: {
            hotkey: "Enter",
            allowWhenInputFocused: true,
            isEnabled: (tree) => tree.isRenamingItem(),
            handler: (e, tree) => {
                tree.completeRenaming();
            },
        },
    },
};
