"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.insertItemsAtTarget = void 0;
const insertItemsAtTarget = (itemIds, target, onChangeChildren) => __awaiter(void 0, void 0, void 0, function* () {
    yield target.item.getTree().waitForItemChildrenLoaded(target.item.getId());
    const oldChildrenIds = target.item
        .getTree()
        .retrieveChildrenIds(target.item.getId());
    // add moved items to new common parent, if dropped onto parent
    if (!("childIndex" in target)) {
        const newChildren = [...oldChildrenIds, ...itemIds];
        yield onChangeChildren(target.item, newChildren);
        if (target.item && "updateCachedChildrenIds" in target.item) {
            target.item.updateCachedChildrenIds(newChildren);
        }
        target.item.getTree().rebuildTree();
        return;
    }
    // add moved items to new common parent, if dropped between siblings
    const newChildren = [
        ...oldChildrenIds.slice(0, target.insertionIndex),
        ...itemIds,
        ...oldChildrenIds.slice(target.insertionIndex),
    ];
    yield onChangeChildren(target.item, newChildren);
    if (target.item && "updateCachedChildrenIds" in target.item) {
        target.item.updateCachedChildrenIds(newChildren);
    }
    target.item.getTree().rebuildTree();
});
exports.insertItemsAtTarget = insertItemsAtTarget;
