"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.syncDataLoaderFeature = void 0;
const utils_1 = require("../../utils");
const errors_1 = require("../../utilities/errors");
const promiseErrorMessage = "sync dataLoader returned promise";
const unpromise = (data) => {
    if (!data || (typeof data === "object" && "then" in data)) {
        throw (0, errors_1.throwError)(promiseErrorMessage);
    }
    return data;
};
exports.syncDataLoaderFeature = {
    key: "sync-data-loader",
    getInitialState: (initialState) => (Object.assign({ loadingItemData: [], loadingItemChildrens: [] }, initialState)),
    getDefaultConfig: (defaultConfig, tree) => (Object.assign({ setLoadingItemData: (0, utils_1.makeStateUpdater)("loadingItemData", tree), setLoadingItemChildrens: (0, utils_1.makeStateUpdater)("loadingItemChildrens", tree) }, defaultConfig)),
    stateHandlerNames: {
        loadingItemData: "setLoadingItemData",
        loadingItemChildrens: "setLoadingItemChildrens",
    },
    treeInstance: {
        waitForItemDataLoaded: () => __awaiter(void 0, void 0, void 0, function* () { }),
        waitForItemChildrenLoaded: () => __awaiter(void 0, void 0, void 0, function* () { }),
        retrieveItemData: ({ tree }, itemId) => {
            return unpromise(tree.getConfig().dataLoader.getItem(itemId));
        },
        retrieveChildrenIds: ({ tree }, itemId) => {
            const { dataLoader } = tree.getConfig();
            if ("getChildren" in dataLoader) {
                return unpromise(dataLoader.getChildren(itemId));
            }
            return unpromise(dataLoader.getChildrenWithData(itemId)).map((c) => c.data);
        },
        loadItemData: ({ tree }, itemId) => tree.retrieveItemData(itemId),
        loadChildrenIds: ({ tree }, itemId) => tree.retrieveChildrenIds(itemId),
    },
    itemInstance: {
        isLoading: () => false,
    },
};
