"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.propMemoizationFeature = void 0;
const memoize = (props, memoizedProps) => {
    for (const key in props) {
        if (typeof props[key] === "function") {
            if (memoizedProps && key in memoizedProps) {
                props[key] = memoizedProps[key];
            }
            else {
                memoizedProps[key] = props[key];
            }
        }
    }
    return props;
};
exports.propMemoizationFeature = {
    key: "prop-memoization",
    overwrites: [
        "main",
        "async-data-loader",
        "sync-data-loader",
        "drag-and-drop",
        "expand-all",
        "hotkeys-core",
        "renaming",
        "search",
        "selection",
    ],
    treeInstance: {
        getContainerProps: ({ tree, prev }, treeLabel) => {
            var _a, _b, _c;
            var _d, _e;
            const dataRef = tree.getDataRef();
            const props = (_a = prev === null || prev === void 0 ? void 0 : prev(treeLabel)) !== null && _a !== void 0 ? _a : {};
            (_b = (_d = dataRef.current).memo) !== null && _b !== void 0 ? _b : (_d.memo = {});
            (_c = (_e = dataRef.current.memo).tree) !== null && _c !== void 0 ? _c : (_e.tree = {});
            return memoize(props, dataRef.current.memo.tree);
        },
        getSearchInputElementProps: ({ tree, prev }) => {
            var _a, _b, _c;
            var _d, _e;
            const dataRef = tree.getDataRef();
            const props = (_a = prev === null || prev === void 0 ? void 0 : prev()) !== null && _a !== void 0 ? _a : {};
            (_b = (_d = dataRef.current).memo) !== null && _b !== void 0 ? _b : (_d.memo = {});
            (_c = (_e = dataRef.current.memo).search) !== null && _c !== void 0 ? _c : (_e.search = {});
            return memoize(props, dataRef.current.memo.search);
        },
    },
    itemInstance: {
        getProps: ({ item, prev }) => {
            var _a, _b, _c;
            var _d, _e;
            const dataRef = item.getDataRef();
            const props = (_a = prev === null || prev === void 0 ? void 0 : prev()) !== null && _a !== void 0 ? _a : {};
            (_b = (_d = dataRef.current).memo) !== null && _b !== void 0 ? _b : (_d.memo = {});
            (_c = (_e = dataRef.current.memo).item) !== null && _c !== void 0 ? _c : (_e.item = {});
            return memoize(props, dataRef.current.memo.item);
        },
        getRenameInputProps: ({ item, prev }) => {
            var _a, _b, _c;
            var _d, _e;
            const dataRef = item.getDataRef();
            const props = (_a = prev === null || prev === void 0 ? void 0 : prev()) !== null && _a !== void 0 ? _a : {};
            (_b = (_d = dataRef.current).memo) !== null && _b !== void 0 ? _b : (_d.memo = {});
            (_c = (_e = dataRef.current.memo).rename) !== null && _c !== void 0 ? _c : (_e.rename = {});
            return memoize(props, dataRef.current.memo.rename);
        },
    },
};
