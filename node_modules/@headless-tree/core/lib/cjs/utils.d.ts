import { SetStateFn, TreeState, Updater } from "./types/core";
export type NoInfer<T> = [T][T extends any ? 0 : never];
export declare const memo: <D extends readonly any[], P extends readonly any[], R>(deps: (...args: [...P]) => [...D], fn: (...args: [...D]) => R) => (...a: P) => R;
export declare function functionalUpdate<T>(updater: Updater<T>, input: T): T;
export declare function makeStateUpdater<K extends keyof TreeState<any>>(key: K, instance: unknown): SetStateFn<TreeState<any>[K]>;
export declare const poll: (fn: () => boolean, interval?: number, timeout?: number) => Promise<void>;
