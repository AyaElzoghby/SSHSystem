import { DragEvent } from "react";
import { TreeConfig, TreeInstance } from "../types/core";
import { TestTreeDo } from "./test-tree-do";
import { TestTreeExpect } from "./test-tree-expect";
export declare class TestTree<T = string> {
    private config;
    readonly do: TestTreeDo<T>;
    readonly expect: TestTreeExpect<T>;
    private treeInstance;
    private static asyncLoaderResolvers;
    private asyncDataLoaderImp;
    suits: {
        sync: () => {
            tree: TestTree<T>;
            title: string;
        };
        async: () => {
            tree: TestTree<T>;
            title: string;
        };
        proxifiedSync: () => {
            tree: TestTree<T>;
            title: string;
        };
        proxifiedAsync: () => {
            tree: TestTree<T>;
            title: string;
        };
    };
    forSuits(runSuite: (tree: TestTree<T>) => void): void;
    get instance(): TreeInstance<T>;
    private constructor();
    static resolveAsyncLoaders(): Promise<void>;
    resolveAsyncVisibleItems(): Promise<void>;
    static default(config: Partial<TreeConfig<string>>): TestTree<string>;
    with(config: Partial<TreeConfig<T>>): TestTree<T>;
    resetBeforeEach(): void;
    createTestCaseTree(): Promise<this>;
    withFeatures(...features: any): TestTree<T>;
    mockedHandler(handlerName: keyof TreeConfig<T>): import("vitest").Mock<(...args: any[]) => any>;
    item(itemId: string): import("../types/core").ItemInstance<T>;
    reset(): void;
    debug(): void;
    setElementBoundingBox(itemId: string, bb?: Partial<DOMRect>): void;
    static dragEvent(clientX?: number, clientY?: number): DragEvent;
    createTopDragEvent(indent?: number): DragEvent<Element>;
    createBottomDragEvent(indent?: number): DragEvent<Element>;
}
