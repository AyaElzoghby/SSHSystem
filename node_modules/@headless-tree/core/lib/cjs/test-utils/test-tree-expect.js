"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestTreeExpect = void 0;
/* eslint-disable import/no-extraneous-dependencies */
const vitest_1 = require("vitest");
const test_tree_1 = require("./test-tree");
class TestTreeExpect {
    itemInstance(itemId) {
        return this.tree.instance.getItemInstance(itemId);
    }
    itemProps(itemId) {
        return this.itemInstance(itemId).getProps();
    }
    constructor(tree) {
        this.tree = tree;
    }
    foldersExpanded(...itemIds) {
        for (const itemId of itemIds) {
            (0, vitest_1.expect)(this.tree.instance.getItemInstance(itemId).isExpanded(), `Expected ${itemId} to be expanded`).toBe(true);
        }
    }
    foldersCollapsed(...itemIds) {
        for (const itemId of itemIds) {
            (0, vitest_1.expect)(this.tree.instance.getItemInstance(itemId).isExpanded(), `Expected ${itemId} to be collapsed`).toBe(false);
        }
    }
    hasChildren(itemId, children) {
        const item = this.tree.instance.getItemInstance(itemId);
        const itemChildren = item.getChildren().map((child) => child.getId());
        (0, vitest_1.expect)(itemChildren).toEqual(children);
    }
    substate(key, value) {
        (0, vitest_1.expect)(this.tree.instance.getState()[key]).toEqual(value);
    }
    dropped(draggedItems, target) {
        (0, vitest_1.expect)(this.tree.instance.getConfig().onDrop).toBeCalledWith(draggedItems.map((id) => this.tree.item(id)), target);
    }
    dragOverNotAllowed(itemId, event) {
        const e = event !== null && event !== void 0 ? event : test_tree_1.TestTree.dragEvent();
        e.preventDefault.mockClear();
        this.itemProps(itemId).onDragOver(e);
        this.itemProps(itemId).onDragOver(e);
        this.itemProps(itemId).onDragOver(e);
        (0, vitest_1.expect)(e.preventDefault, "onDragOver shouldn't call e.preventDefault if drag is not allowed").not.toBeCalled();
        this.itemProps(itemId).onDrop(e);
        (0, vitest_1.expect)(e.preventDefault, "onDrop shouldn't call e.preventDefault if drag is not allowed").not.toBeCalled();
        (0, vitest_1.expect)(this.tree.instance.getConfig().onDrop, "onDrop handler shouldn't be called if drag is not allowed").not.toBeCalled();
        return e;
    }
    defaultDragLineProps(indent = 0) {
        (0, vitest_1.expect)(this.tree.instance.getDragLineData()).toEqual({
            indent,
            left: indent * 20,
            width: 100 - indent * 20,
            top: 0,
        });
        (0, vitest_1.expect)(this.tree.instance.getDragLineStyle(0, 0)).toEqual({
            position: "absolute",
            left: `${indent * 20}px`,
            pointerEvents: "none",
            top: "0px",
            width: `${100 - indent * 20}px`,
        });
    }
}
exports.TestTreeExpect = TestTreeExpect;
