"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.poll = exports.memo = void 0;
exports.functionalUpdate = functionalUpdate;
exports.makeStateUpdater = makeStateUpdater;
const memo = (deps, fn) => {
    let value;
    let oldDeps = null;
    return (...a) => {
        const newDeps = deps(...a);
        if (!value) {
            value = fn(...newDeps);
            oldDeps = newDeps;
            return value;
        }
        const match = oldDeps &&
            oldDeps.length === newDeps.length &&
            !oldDeps.some((dep, i) => dep !== newDeps[i]);
        if (match) {
            return value;
        }
        value = fn(...newDeps);
        oldDeps = newDeps;
        return value;
    };
};
exports.memo = memo;
function functionalUpdate(updater, input) {
    return typeof updater === "function"
        ? updater(input)
        : updater;
}
function makeStateUpdater(key, instance) {
    return (updater) => {
        instance.setState((old) => {
            return Object.assign(Object.assign({}, old), { [key]: functionalUpdate(updater, old[key]) });
        });
    };
}
const poll = (fn, interval = 100, timeout = 1000) => new Promise((resolve) => {
    let clear;
    const i = setInterval(() => {
        if (fn()) {
            resolve();
            clearInterval(i);
            clearTimeout(clear);
        }
    }, interval);
    clear = setTimeout(() => {
        clearInterval(i);
    }, timeout);
});
exports.poll = poll;
